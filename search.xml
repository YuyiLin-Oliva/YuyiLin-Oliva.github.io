<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[C++基础]]></title>
    <url>%2F2020%2F02%2F21%2FC%2B%2B%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[1. 构造函数能否为虚函数，析构函数呢? 构造函数： 存储空间角度：虚函数对应一个vtable，vtable存储于对象的内存空间 若构造函数是虚的，则需要通过 vtable来调用，若对象还未实例化，即内存空间还没有，无法找到vtable 使用角度：虚函数主要用于在信息不全的情况下，能使重载的函数得到对应的调用。 构造函数本身就是要初始化实例，在对象生命期只执行一次，不是对象的动态行为，也没有太大的必要成为虚函数 从实际含义上看，在调用构造函数时还不能确定对象的真实类型（因为子类会调父类的构造函数) 析构函数： 析构函数可以为虚函数，并且一般情况下基类析构函数要定义为虚函数。 只有在基类的析构函数定义为虚函数时，基类指针可以指向派生类的对象（多态性），调用delete操作符销毁指向该对象的基类指针时，就会调用该指针指向的派生类析构函数，而派生类的析构函数又自动调用基类的析构函数，使整个派生类的对象完全被释放。 如果不需要基类对派生类及对象进行操作,则不能定义虚函数,因为这样会增加内存开销。当类里面有定义虚函数的时候,编译器会给类添加一个虚函数表,里面来存放虚函数指针,这样就会增加类的存储空间。所以,只有当一个类被用来作为基类的时候,并且有使用到基类指针操作派生类的情况时，才把析构函数写成虚函数。 析构函数可以是纯虚函数，含有纯虚函数的类是抽象类，此时不能被实例化。但派生类中可以根据自身需求重新改写基类中的纯虚函数。 2. 构造函数和析构函数中可以调用虚函数吗?可以，但是没有动态绑定的效果，所以最好不要在析构和构造函数中调用。 构造函数： 如果有继承，构造函数会先调用父类构造函数，而如果构造函数中有虚函数，此时子类还没有构造，所以此时的对象还是父类的，不会触发多态。更容易记的是基类构造期间，virtual函数不是virtual函数。 析构函数： 析构函数也是一样，子类先进行析构，这时，如果有virtual函数的话，子类的内容已经被析构了，C++会视其父类，执行父类的virtual函数。 map与unordered_map的区别 RAII机制 c语言大小端转化 结构体和联合体字节对齐eg: struct内存对齐讲一讲作者：龙少~链接：https://www.nowcoder.com/discuss/121346?type=post&amp;order=time&amp;pos=&amp;page=1来源：牛客网 内存对齐的原因是：第一：部分硬件平台不支持任意地址的内存访问，必须要对齐访问，第二：提高CPU性能。对齐规则：第一：按照最大字节对齐，第二：前面的地址是后面地址的整数倍，第三：如果指定了#pragma pack(n)编译选型，按照n个字节对齐 fork vfork 写时复制 静态链接和动态链接 mtrace, MALLOC_CHECK_宏跟踪malloc内存泄漏 priority_queue, lambda leetcode 23,148]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++]]></title>
    <url>%2F2019%2F09%2F11%2FC%2B%2B%2F</url>
    <content type="text"><![CDATA[C++基础知识点 纯虚函数与虚函数的区别与作用（OPPO）虚函数的实现；(虚表)（拼多多/网易互娱） C++中哪些函数不能被声明为虚函数？(普通、内联、构造、友元、静态) （头条） 12345678910常见的不能声明为虚函数的有普通函数（非成员函数）、静态成员函数、内联成员函数、构造函数和友元函数。以下将分别对这几种情况进行分析。1）普通函数（非成员函数）只能overload（重载），不能被override（覆盖），不能被声明为虚函数，因此，编译器会在编译时绑定函数。2）静态成员函数不能是虚函数，因为静态成员函数对于每个类来说只有一份代码，所有的对象都共享这一份代码，它不归某个对象所有，所以，它也没有动态绑定的必要性。3）内联成员函数不能是虚函数，因为内联函数本身就是为了在代码中直接展开，减少函数调用花费的代价而设立的，而虚函数是为了在继承后对象能够准确地执行自己的动作，这是不可能统一的。再说，inline函数在编译时被展开，虚函数在运行时才能动态地绑定函数。4）构造函数之所以不能是虚函数，因为构造函数本来是为了明确初始化对象成员才产生的，然而虚函数主要是为了在不完全了解细节的情况下也能正确处理对象。另外，虚函数是在不同类型的对象产生不同的动作，现在对象还没有产生，如何使用虚函数来完成你想完成的动作？5）友元函数。C++语言不支持友元函数的继承，对于没有继承特性的函数没有虚函数的说法。友元函数不属于类的成员函数，不能被继承。所以，友元函数不能是虚函数。 为什么构造函数不能被声明为虚函数？友元函数可以被声明为虚函数吗？为什么？（头条） 基类的虚函数的指针在派生类的虚标中吗？为什么要这样做？(远景) 拷贝构造函数和赋值函数。拷贝构造函数有什么缺点 （360） 函数重载、函数重写（override）特性；虚函数子类构造析构函数的调用顺序 （腾讯） 关键字static的作用（OPPO） 智能指针，lambda表达式 四种强制类型转换符（拼多多）类型兼容规则（网易互娱）正则表达式 （腾讯） struct与class、union的区别；struct中的字节对齐机制；C语言如何实现面向对象编程；（拼多多） map, unordered_map的区别； vector的push_back()方法实现；左值与右值分别指什么（网易互娱） malloc(0)会怎么样 （华为） new和malloc delete和free的区别？ 如何实现多态？ （远景） free()函数入参是一个void*指针，是如何知道被指向的大小的？ （腾讯） vector和list中，删除末尾的元素，其指针和迭代器如何变化？若删除的是中间的元素呢？ （阿里）STL中Vector、List和Map底层实现原理（腾讯） c++种常见的stl库中的vector。它是是一个可变数组。但它实际是用一个固定的数组储存的，并且用size和capacity来计数，size表示储存元素的大小，capacity表示数组的大小，当size&gt;=capacity时会重新申请内存并释放旧的内存，拷贝是通过浅拷贝实现的，以1.5-2倍的大小扩容，而为什么以这个倍数也可以通过数学推导算出来…详细的可以具体百度 Vector的扩容，如果数据量很多扩容会怎么样，怎么设计更好的（360） 几个字符串的函数，如内存拷贝函数；内存泄漏怎么来的，如何解决；内存池怎么实现；深拷贝浅拷贝等, 内存拷贝函数memcpy函数实现 (奇安信) 空类的sizeof大小； 类A空，类B继承A，B中有一个虚函数，sizeof大小；类A空，类B中有一个虚函数和一个类A对象，sizeof大小 （360） 函数重载。如果返回值不同或者参数位置不同是否是重载？虚函数是否可以是内联函数？函数指针和泛函数？（360） 编译性和解释性语言的区别； 对象的生命周期（多益网络）C++对象内存布局（腾讯） 局部变量、全局变量、常量还有malloc开辟的内存变量分别放在哪个区；main函数执行前后会执行什么代码（网易游戏） c/c++程序如何控制执行到某个特定内存地址？什么是迭代器失效？ C++模板方面的问题，先给了三个重载函数（普通函数、函数模板、特例化的函数模板），根据入参确定调用的函数； 类型萃取的问题，如何使用模板来判断入参是一个类对象指针，还是一个内置类型指针。 inline的作用；C++11新特性；explain关键字（腾讯） size_t、ssize_t、int、long 12typedef unsigned int(32位)/long(64位) size_t 无符号整型typedef int(32位)/long(64位) ssize_t 有符号整型]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据库]]></title>
    <url>%2F2019%2F09%2F11%2F%E6%95%B0%E6%8D%AE%E5%BA%93%2F</url>
    <content type="text"><![CDATA[数据库 关系型数据库的基本内容包括：ACID属性，数据库的基本概念(如范式)和基本操作指令(虽然一般不会直接考察写指令)， 隔离级别（未提交读，提交读，可重复读，可串行化），锁和并发一致性问题（丢失修改，脏读，不可重复读，幻影读）， 存储引擎InnoDB和MyISAMd的区别， 索引(重点，如何实现)，索引的类别和使用场景（B+树索引，哈希索引，全文索引，空间数据索引） 切分（水平切分sharing,垂直切分），主从复制（binlog io sql线程）和读写分离等。 数据库中的事务（原子性，一致性，隔离性，持久性）以及一致性问题； 数据库的底层实现(B+树，跳表)；B树和B+树的区别？BST/AVL/B/B+/红黑树 Redis的底层数据类型，zset的实现，使用场景; Redis为什么被经常用来做排行榜相关的业务（有序集合）; Redis集群上如何保证数据的同步 (字节) 非关系数据库redis，如RDB持久化和AOF持久化]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算机网络]]></title>
    <url>%2F2019%2F09%2F11%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%2F</url>
    <content type="text"><![CDATA[计算机网络内容基本按照TCP/IP五层模型展开，即物理层，数据链路层，网络层，传输层，应用层。前两层了解即可，网络层必须要掌握IP协议，传输层包括TCP和UDP，几乎面试必问，考的也比较细致，比如TCP的可靠传输，流量控制，拥塞避免，甚至报文格式。因此，必须理解工作原理。应用层主要是HTTP，问的较多的是get与post的区别。I/O模型主要考阻塞/非阻塞、同步/异步五种I/O模型，尤其是I/O多路复用中poll、select和epoll的区别。 web页面请求过程：在浏览器中输入一个网址到获得一个页面，这个过程中有用到哪些协议？(DNS + HTTP + TCP + IP + ARP；（美团/拼多多） 在浏览器中输入一个网址，服务器是如何找到你的主机的？(头条) HTTP报文格式； 访问一个网址和提交一段代码到网上有何区别？(GET和POST的区别)（美团） TTL指的是什么？(Time To Live，生存时间，也是跳数限制) traceroute的过程（拼多多） （阿里云） 计算机网络体系为什么要按照现有体系进行分层 服务器出现大量Time-wait状态的原因及解决方法 ，出现大量Close-wait状态的原因及解决方法 tcp短连接TIME_WAIT问题解决方法 TCP中的TIME_WAIT （腾讯） TCP三次握手四次挥手状态图，对应的POSIX API，为什么要三次握手，两次可以吗？ 为了实现可靠传输，发送方和接收方始终需要同步( SYNchronize )序号。 需要注意的是， 序号并不是从 0 开始的， 而是由发送方随机选择的初始序列号 ( Initial Sequence Number, ISN )开始 。 由于 TCP 是一个双向通信协议， 通信双方都有能力发送信息， 并接收响应。 因此， 通信双方都需要随机产生一个初始的序列号， 并且把这个起始值告诉对方。 假设服务端的确认丢失，连接并未断开，（空连接挂载在服务器上）客户机超时重发连接请求，这样服务器会对同一个客户机保持多个连接，造成资源浪费。 TCP如何保证可靠性，对方是否存活(心跳检测) TCP和UDP区别 1、TCP是面向连接的（在客户端和服务器之间传输数据之前要先建立连接），UDP是无连接的（发送数据之前不需要先建立连接） 2、TCP提供可靠的服务（通过TCP传输的数据。无差错，不丢失，不重复，且按序到达）；UDP提供面向事务的简单的不可靠的传输。 3、UDP具有较好的实时性，工作效率比TCP高，适用于对高速传输和实时性比较高的通讯或广播通信。随着网速的提高，UDP使用越来越多。 4、没一条TCP连接只能是点到点的，UDP支持一对一，一对多和多对多的交互通信。 5、TCP对系统资源要求比较多，UDP对系统资源要求比较少 6、UDP程序结构更加简单 7、TCP是流模式，UDP是数据报模式 流量控制，拥塞控制 TCP的拥塞控制 TCP连接拥塞控制四种方法 SYN Flood攻击 HTTP状态码Libevent如何处理IO事件，信号事件，和定时事件 TCP三次握手 四次挥手 具体细节，什么是半连接状态；TCP连接断开时为什么需要一个timewait状态？（旷世）UDP怎么保证可靠 TCP三次握手建立完后客户端突然断网后的情况；ping有没有端口；如果接收方数据处理不过来会发生什么情况 （360） HTTP与HTTPS的区别；(加密与否) HTTPS如何实现加密传输；(非对称加密机制) HTTPS的认证过程；（拼多多）session和cookies的区别 TCP TIME_WAIT状态的原因： 如果客户端直接进入CLOSED状态，如果服务端没有接收到最后一次ACK包会在超时之后重新再发FIN包，此时因为客户端已经CLOSED，所以服务端就不会收到ACK而是收到RST。所以TIME_WAIT状态目的是防止最后一次握手数据没有到达对方而触发重传FIN准备的，为了保证全双工的 TCP 连接正常终止。 TCP 下的 IP 层协议是无法保证包传输的先后顺序的。如果如果客户端直接进入CLOSED状态，双方挥手之后，一个网络四元组（src/dst ip/port）被回收，而此时网络中还有一个迟到的数据包没有被 B 接收，A 应用程序又立刻使用了同样的四元组再创建了一个新的连接后，这个迟到的数据包才到达 B，那么这个数据包就会让 B 以为是 A 刚发过来的。 此时， TIME_WAIT 的存在是为了保证网络中迷失的数据包正常过期。在经过时间2MSL，就可以使本链接持续时间内所产生的所有报文段都从网络中消失，这样就可以使下一个新的连接中不会出现这种旧的连接请求报文段。 最大分段寿命（MSL, Maximum Segment Lifetime），它表示一个 TCP 分段可以存在于互联网系统中的最大时间，由 TCP 的实现，超出这个寿命的分片都会被丢弃。 常见面试题 HTTPS 数字证书原理ssl,http http长连接与短连接简略版 长短连接详细版 http连接池-httpClient 参考Java http线程池 参考 会话机制 cookie和session的区别 性能测试工具 Webbench 查看吞吐量，top查看CPU使用率（单线程占比*线程数）参考测试及改进 TCP UDP的区别： https://blog.csdn.net/zhang6223284/article/details/81414149 https://www.cnblogs.com/williamjie/p/9390164.html TCP连接状态详解及TIME_WAIT过多的解决方法]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[算法与数据结构]]></title>
    <url>%2F2019%2F09%2F11%2F%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2F</url>
    <content type="text"><![CDATA[算法与数据结构​ 有的面试会复盘笔试题 哈希表(哈希冲突)（OPPO）链表排序 括号匹配（字节） 括号生成：回溯 （远景） 排序算法（OPPO) 堆排序，并分析时间复杂度/建堆+调整（美团/头条）冒泡算法（阿里） 桶排序和跳跃表排序（多益网络）初始化建堆的时间复杂度为O(n)，排序重建堆的时间复杂度为nlog(n)，所以总的时间复杂度为O(n+nlogn)=O(nlogn)。另外堆排序的比较次数和序列的初始状态有关，但只是在序列初始状态为堆的情况下比较次数显著减少，在序列有序或逆序的情况下比较次数不会发生明显变化。 B+树 二叉树，包含增删差改 （百度） 向量为什么要加倍式扩容（字节） 在微博上关注了1k个大v，大v们每人有1w条微博，要想快速的访问前100条，应该怎么做？(排序+堆) (美团) 二叉搜索树的特征，查找和插入的时间复杂度；为什么说二叉搜索树有时会不稳定，如何改进？(可能会退化为链表；改进为平衡二叉查找树) ；AVL树大概的调整过程；(左旋右旋) ； 红黑树的特征以及大概的调整过程；(美团)参考：平衡二叉树，若深度不平衡，类似于单链表，时间复杂度为o(n);深度平衡的情况下，时间复杂度为o(logn);给定值的比较次数等于给定值节点在二叉排序树中的层数。如果二叉排序树是平衡的，则n个节点的二叉排序树的高度为Log2n+1,其查找效率为O(Log2n)，近似于折半查找。如果二叉排序树完全不平衡，则其深度可达到n，查找效率为O(n)，退化为顺序查找。一般的，二叉排序树的查找性能在O(Log2n)到O(n)之间。因此，为了获得较好的查找性能，就要构造一棵平衡的二叉排序树。原文链接：https://blog.csdn.net/xieyutian1990/article/details/38435619 数组中0，1，2分别代表三种颜色的小球，调整数组元素使得相同颜色的小球在一起，要求在时间复杂度为O(n)，不能用额外空间；(双指针) （拼多多） 一个链表，value里面存了公司里所有人的年龄，希望你对这个链表做切分，切分出来的section越多越好，但是有一个条件：同一个年龄的人只允许分配到用一个section中，返回所有section的长度的数组；输入：29 -&gt; 30 -&gt; 31 -&gt; 32 -&gt; 31 -&gt; NULL，输出：[1, 1, 3]；(滑动窗口) （拼多多） 两个并发线程T1和T2，分别只能打印A和B，要求写一段代码，可以一直打印序列”AABBAABB…（远景） 有两个很大的文件，如何找出其中相同的行？（阿里） （腾讯） 布隆过滤器 红黑树性质redis中的数据结构，跳表插入删除过程 Leetcode类似题目： 三数之和（leetcode 15） (美团) 如何实现topK（堆）、数组中连续子数组的最大和（dp）、字符串转化为数字（拼多多） 两个栈实现一个队列、数据流的中位数、二叉树的直径（华为） 双向链表的插入 （海康） 字符串中回文子串的数目/dp 给你一个字符串，返回所有它能表示的IP地址；(回溯) 有10亿个数，如何找出其中最小的100个数；(堆) (头条) 重排数组中的元素，使之组合起来能得到一个最大的数字；(重新定义比较器)； 剪绳子；(dp或者贪心) （360） 找出两个序列中的最长公共子序列；(dp) （旷世） 二叉树的后序遍历，递归和非递归，两个很大的矩阵相乘，如何并行实现？(分块) 最长回文子串？ 海量数据排序（堆，归并）（阿里） LRU缓存 （Leetcode146）二叉堆的维护 （腾讯） 数组al[0,mid-1]和al[mid,num-1]都分别是有序的，将其merge成有序数组al[0,num-1]，要求空间O(1)，时间O(N)。 （网易互娱） N个人都有一个权重，随机选取m个人。怎么取？ （网易互娱） 10万个ip段，每个ip段对应一个城市，给定一个ip，快速找到对应的城市 （网易互娱） 每次走一楼或者两楼，到n楼有几种方法；用define写一个结构体类型的偏移地址；KMP算法，dfs（深信服） 不用递归实现斐波那契系数；有一个产生n个数的随机函数；请写一个函数ChooseKey，在给定的权重表中，根据”权重”随机抽取一个”字符”并返回 （多益网络） （字节跳动） 从一个二维的字符串数组中，匹配一个小字符串，每次可以从上下左右匹配，但是不能超出数组范围 leetcode：单词搜索 给定一条长度为N的绳子，切绳子，求如何切使得每段绳子的长度的乘集最大 leetcode ：剪绳子 有序数组每个数平方后，不同数字的个数？O(n) 12345678910111213141516171819202122232425262728293031323334353637#include &lt;iostream&gt;#include &lt;vector&gt;using std::vector;#include &lt;algorithm&gt;int squreUniqueNum(vector&lt;int&gt; &amp;vec)&#123; int len = vec.size(); if (len &lt; 2) return len; // 双指针从两端向中间遍历，每次删除绝对值最大的数，并记录下该值用于后续去重 int i = 0, j = len - 1; int num = 1; int pre = abs(vec[0]); while (i &lt;= j) &#123; if (abs(vec[i]) &gt; abs(vec[j])) &#123; if (pre != abs(vec[i])) &#123; // 如果未删除 ++num; pre = vec[i]; &#125; ++i; &#125; else &#123; if (pre != abs(vec[j]) ) &#123; // 如果未删除 ++num; pre = vec[j]; &#125; --j; &#125; &#125; return num;&#125;int main()&#123; vector&lt;int&gt; vec&#123;-5,-3,-1,1,1,2&#125;; int num = squreUniqueNum(vec); std::cout &lt;&lt; num &lt;&lt; std::endl;&#125; 4. 只使用加减乘除等基本运算实现正整数的开方（二分） 5. 有N个台阶，每次只能走一步或两步，先走完全部台阶为获胜，有两个人甲和乙，甲先走，判断在什么情况下甲一定会先到 6. 假设数组 A 和 B 都是有序的，并且 A 有足够多余的空间可以合并 B。要求不使用额外的空间，把 B 合并进 A 并保证最终的数组有序。 例如： A = {-3, 5, INVALID_NUM, 7, INVALID_NUM, 10, INVALID_NUM, 11, INVALID_NUM}，B = {-1, 2, 6, 12} 最后：A = {-3, -1, 2, 5, 6, 7, 10, 11, 12} 7. 给你一棵二叉树，它的根为 root 。请你删除 1 条边，使二叉树分裂成两棵子树，且它们子树和的乘积尽可能大，返回最大的乘积。 LeetCode 1339 8. 36进制正整数加法，不允许把36进制数字整体转为10进制数字，计算出10进制累加结果再转回为36进制 - （网易游戏） 给定n个正整数，如何找出最小的K个正整数 给定一组整数1000以内，如何高效去除重复的数 字符串中查找是否有子串，写完以后要求给出测试用例 面试很常见。常见关于堆的面试： 1. 实现一个堆数据结构（插入，删除） 2. 求 top k eg：leetcode 347 求前 k 大，用小根堆，求前 k 小，用大根堆。面试的时候如果说反了会挂！ 3. 求中位数 维护最大堆，最小堆 4. k 路归并…… 建立最小堆，依次输出堆顶元素 （腾讯） 查找二叉树中第k小的元素 判断大小端，int的大端转小端 去掉字符串开头和末尾的空格 大数相加 最长公共子序列LCS 最小编辑距离 二叉树中两个节点的最近公共父节点 数据流的中位数 char a[N]中找出不在char b[M]中的字符，保存在char c[]中 （c语言实现） 洗牌算法 反转链表、链表中倒数第k个、 [pow(x, n) o(log(N))实现](https://blog.csdn.net/qq_28114615/article/details/84749629) 分为奇数和偶数两种情况1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859//priority_queue和sort函数第三个参数重载比较函数写法// leetcode 23 合并k个排序链表class Solution &#123;public: // 重写仿函数 struct cmp&#123; bool operator()(ListNode* a, ListNode* b)&#123; return a-&gt;val &gt; b-&gt;val; &#125; &#125;; ListNode* mergeKLists(vector&lt;ListNode*&gt;&amp; lists) &#123; // 或者用lambda写匿名函数 // auto cmp = [](ListNode* a, ListNode* b)&#123; // if(a-&gt;val &gt; b-&gt;val) return true; // else return false; // &#125;; //priority_queue&lt;ListNode*, vector&lt;ListNode*&gt;, decltype(cmp)&gt; que(cmp); priority_queue&lt;ListNode*, vector&lt;ListNode*&gt;, cmp&gt; que;//注意cmp for(ListNode* list : lists)&#123; if(list)&#123; que.push(list); &#125; &#125; ListNode node(0), *head = &amp;node; while(!que.empty())&#123; ListNode* tmp = que.top(); que.pop(); head-&gt;next = tmp; head = head-&gt;next; if(head-&gt;next)&#123; que.push(head-&gt;next); &#125; &#125; return node.next; &#125;&#125;;// 剑指offer 把数组排成最小的数class Solution &#123;public: string PrintMinNumber(vector&lt;int&gt; numbers) &#123; //使用STL库中的sort()函数，用lambda或者仿函数重载比较器 string res; /*auto tmp = [](const int&amp; a, const int&amp; b)&#123; return to_string(a) + to_string(b) &lt; to_string(b) + to_string(a); &#125;;*/ struct tmp&#123; bool operator()(const int&amp; a, const int&amp; b)&#123; return to_string(a) + to_string(b) &lt; to_string(b) + to_string(a); &#125; &#125;; sort(numbers.begin(), numbers.end(), tmp());//注意tmp() for(auto num : numbers)&#123; res += to_string(num); &#125; return res; &#125;&#125;; bitset 并查集 概念并查集（Union/Find）从名字可以看出，主要涉及两种基本操作:合并和查找。这说明，初始时并查集中的元素是不相交的，经过一系列的基本操作(Union)，最终合并成一个大的集合。 而在某次合并之后，有一种合理的需求：某两个元素是否已经处在同一个集合中了？因此就需要Find操作。 并查集是一种 不相交集合 的数据结构，设有一个动态集合S={s1，s2，s3，…sn}，每个集合通过一个代表来标识，代表 就是动态集合S 中的某个元素。 比如，若某个元素 x 是否在集合 s1 中(Find操作)，返回集合 s1 的代表元素即可。这样，判断两个元素是否在同一个集合中也是很方便的，只要看find(x) 和 find(y) 是否返回同一个代表即可。 为什么是动态集合S呢？因为随着Union操作，动态集合S中的子集合个数越来越少。 数据结构的基本操作决定了它的应用范围，对并查集而言，一个简单的应用就是判断无向图的连通分量个数，或者判断无向图中任何两个顶点是否连通。 例题参考 原理及实现]]></content>
      <categories>
        <category>算法与数据结构</category>
      </categories>
      <tags>
        <tag>算法与数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[操作系统]]></title>
    <url>%2F2019%2F09%2F11%2F%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%2F</url>
    <content type="text"><![CDATA[操作系统知识点 fork过程（字节）父进程fork一个子进程，子进程申请4k的内存，它们的内存分布（360） 进程与线程，死锁和内存管理 包括进程与线程的概念与区别，进程控制，进程同步，进程通信等问题；死锁面试基本都会问，但是内容不多，主要围绕是什么，为什么，怎么办三个方面；内存管理主要是段页式存储，虚拟内存，页面置换等方面 进程的三种状态，就绪有哪些 （360） IO多路复用、阻塞与非阻塞、异步与同步、ET与LT的区别，需要注意什么、内存管理(为什么虚拟内存开2倍) 堆和栈（怎么设计一个效率高的内存分配） 如何查看内存空间？如何查看磁盘空间？(free; df -h) 查看系统各种属性的命令，出现频率最高的前十个IP的命令等 如何查看进程？(ps aux) 管道命令如何实现 （阿里） 一个文件”ip.txt”，有两个字段ip(第一列)和访问时间(第二列)，找出访问次数最多的ip； 1awk '&#123;ips[$1]++;&#125; END &#123;for(ip in ips) printf("%s\t%d\n",ip, ips[ip])&#125;' ip.txt | sort -n -k 2 -r | head -n 1 道题主要考察了awk, sort, head和管道命令的运用，值得注意，另外还有像统计词频，杀死指定进程等也经常考察) 写脚本杀死指定名称的进程： ps aux | grep ${processName} | grep -v grep | awk ‘{print $2}’ | xargs kill -s 9 xargs命令是用来把前面命令的输出结果（PID）作为“kill -s 9”命令的参数，并执行该命令。 IO高并发如何实现？为什么进程的切换开销比线程大？(美团) 信号量机制；(整型、记录型、AND型、信号量集) 锁机制；(互斥锁、自旋锁) （拼多多） cache一致性； 虚拟内存与物理内存的区别 ； 游戏中常用的计算机图形学和随机洗牌算法，可以用rand()函数；C++变成可执行文件的过程； （网易互娱） 操作系统中编译和链接是什么；系统调用和用户调用 （多益网络） （阿里云） 文件读经历了哪些过程 Zero Copy的实现机制 给个高配物理机，Redis不足以完全发挥性能优势，怎么办 有哪些死锁避免的解决方法 在交易系统中如何避免死锁，提高性能 参考方案：https://blog.csdn.net/claram/article/details/77853472 对于大文件，为什么CP比MV慢很多 哪些时候会发生上下文切换，上下文切换过程中经历了什么 如果父进程没有调用wait、waitpid，怎么杀死僵尸进程 如果rm以及rm -f一个正在被使用的文件，会发生什么 进程什么时候由用户态转化为内核态？(系统调用、中断、陷入) （旷世） 内核态与用户态的区别/安全性 （远景） CPU调度方式； 写时复制 （360） （腾讯） Linux进程调度算法Linux进程地址空间分布Linux内存管理方法，页面置换算法，逻辑地址和物理地址的转换在一台内存为2G的机器上，malloc(20G)会怎么样？new 20G呢？ 解释孤儿进程，僵死进程，惊群效应 linux netcat cf: tcpdump 命令行抓包 、telnet 远程登录 PCB进程管理块 linux的0号和1号进程 epoll原理解析 mmap epoll源码分析 进程间通信方式 mkdir 文件夹，git init，把这个目录变成Git可以管理的仓库 添加文件到Git仓库，分两步： 使用命令git add &lt;file&gt;，注意，可反复多次使用，添加多个文件； 使用命令git commit -m &lt;message&gt;，完成。 要随时掌握工作区的状态，使用git status命令。 如果git status告诉你有文件被修改过，用git diff可以查看修改内容。 HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。 穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。 要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。 场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。 场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD &lt;file&gt;，就回到了场景1，第二步按场景1操作。 场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。 命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。 要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git； 关联后，使用命令git push -u origin master第一次推送master分支的所有内容； 此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改； 要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。 Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。 Git鼓励大量使用分支： 查看分支：git branch 创建分支：git branch &lt;name&gt; 切换分支：git checkout &lt;name&gt;或者git switch &lt;name&gt; 创建+切换分支：git checkout -b &lt;name&gt;或者git switch -c &lt;name&gt; 合并某分支到当前分支：git merge &lt;name&gt; 删除分支：git branch -d &lt;name&gt; 用git log --graph命令可以看到分支合并图。 git log –graph –pretty=oneline –abbrev-commit 合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。 如果要丢弃一个没有被合并过的分支，可以通过git branch -D &lt;name&gt;强行删除。 修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除； 当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场； 在master分支上修复的bug，想要合并到当前dev分支，可以用git cherry-pick &lt;commit&gt;命令，把bug提交的修改“复制”到当前分支，避免重复劳动。 查看远程库信息，使用git remote -v； 本地新建的分支如果不推送到远程，对其他人就是不可见的； 从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交； 在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致； 建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name； 从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。 命令git tag &lt;tagname&gt;用于新建一个标签，默认为HEAD，也可以指定一个commit id； 命令git tag -a &lt;tagname&gt; -m &quot;blablabla...&quot;可以指定标签信息； 命令git tag可以查看所有标签。 命令git push origin &lt;tagname&gt;可以推送一个本地标签； 命令git push origin --tags可以推送全部未推送过的本地标签； 命令git tag -d &lt;tagname&gt;可以删除一个本地标签； 命令git push origin :refs/tags/&lt;tagname&gt;可以删除一个远程标签。 在GitHub上，可以任意Fork开源仓库； 自己拥有Fork后的仓库的读写权限； 可以推送pull request给官方仓库来贡献代码。 alias 配置别名 操作系统内存池 参考 虚拟内存、页面置换算法 tcp优雅关闭，主动关闭TCP连接shutdown，被动触发关闭close 1234567891011121314151617题目： 如何减少换页错误： A. 进程倾向于占用CPU B. 访问局部性（locality of reference）满足进程要求 C. 进程倾向于占用I/O D. 使用基于最短剩余时间（shortest remaining time）的调度机制答案： B解答： 1. 换页错误又称缺页错误，当一个程序试图访问没有映射到物理内存的地方时，就会出现缺页错误。 2. 减少缺页发生的方法： 增加作业分配的内存块数。 增加页面大小。 页面替换算法。 程序满足局部性原理。 协程 进程间通信-eventfd eventfd2 软链接和硬链接 死锁 ​ linux下查看多线程命令 linux修改内存缓冲区linux下free命令详解 查看linux文件系统类型： df 命令是用来查看文件系来统磁盘空间使用量自的。但df 命令只会列出已挂载百的文件系统信息，对于没有挂载的文件系统是查看不到的。使用这个命令可以很方便的查看已挂载的文件系统的空间使用量、剩余空间大小等信度息。 同时，parted命令也可以查看linux文件类型。parted命令就比较强大了，用parted命令可以对大于2TB的磁盘设备进行分区，以及创建GPT分区（而fdisk命令就办不到了）。如果要查看 /dev/sda 各分区的文件系统类型，可以按照以下步骤来查看：（主要是print list命令） parted /dev/sda (parted) print list linux文件系统 inode理解 linux文件系统简介]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[面经题目汇总]]></title>
    <url>%2F2019%2F08%2F01%2F%E9%9D%A2%E7%BB%8F%E6%B1%87%E6%80%BB%2F</url>
    <content type="text"><![CDATA[邓俊辉的《数据结构与算法》《剑指Offer》《程序员面试金典》 操作系统 学堂在线 向勇的公开课，计算机网络 韩立刚的教学视频 缓存，集群，分布式方面 面试设计题 分析红包的提现过程，如何在不加密的前提下保证安全，提现的瞬间服务器崩溃怎么处理等等 不同的终端登录微信时，数据库怎么处理。比如PC端登录需要手机确定，不同的端登录会将其他端踢下线。 吃鸡中，如何实现游戏毒圈的缩小方法；(极坐标+随机数) 1w人抢购100件商品，如何实现？(高并发) 海量数据处理（Skill-Tree查看） 海量数据每行一个IP，求出现次数最多的5个ip （360） Web漏洞有哪些 淘宝购物栏的推荐怎么实现； 游戏的排行榜怎么实现（如果每一个用户都能看到自己的排名，当修改时又怎么实现。如果显示的排名很少有怎么实现）（多益网络） （字节跳动） 1.5000个客户端tcp长连接到服务器，json(id1 id2 money)，服务端多线程并发处理并执行转账处理。 主要是数据库方面的操作 首先是以保证以事务为单位进行，然后为了提高并发性，每次操作只锁定要处理的行，但是一次操作可能涉及多个行，所以每个线程要先进入数据库完成所有相关行的锁定操作后才允许其他线程进入。 2.10亿用户数据中分别存在100个文件中，每个文件存储1000万行，每行一个用户信息 userId(32字节的字符串),活跃度(double)，找活跃度数值最大的10000个userId和活跃度 建小顶堆，描述建堆的过程，以及算法复杂度。 在建堆的时候，有些数据可能是频繁更新的，有些更新的次数很少，如何优化？（没思路） RPC的协议及原理 分布式相关 智力题 楼层丢鸡蛋 （腾讯） 游戏中，如果有一个AOE的BUFF（类似皇子的旗子E技能），如何实时快速计算这些技能的影响单位 单向链表中如何高效删除一个结点（只给定头指针和指向当前结点的指针）（网易游戏） 阿里巴巴笔试题：抢红包 微信红包随机算法 或者B站毕导 12345678910111213141516171819202122232425261. 创建型模式： 单例模式 抽象工厂模式 建造者模式 工厂模式 原型模式2. 结构型模式： 适配器模式 桥接模式 装饰模式 组合模式 外观模式 享元模式 代理模式3. 行为型模式： 模版方法模式 命令模式 迭代器模式 观察者模式 中介者模式 备忘录模式 解释器模式 状态模式 策略模式 职责链模式 访问者模式 12345678910111213141516171819海量数据处理题目： 搜索引擎的日志要记录所有查询串，有一千万条查询，不重复的不超过三百万，要统计最热门的10条查询。 条件：串内存&lt;1G，字符串长0-255。 给出主要解决思路，算法及其复杂度分析。答案： 1. 面对的问题有： (1)1G内存不够一次性装入所有数据？ (2)如何去统计每个记录出现次数？ (3)如何快速得到前十的记录？ 2. 解决方式： (1)255约2^8，一百万约2^20，即一百万记录约256MB，一千万约2.6GB。分多次处理。 (2)利用hash统计，定义map，key为string类型日志，value为日志出现次数。 (3)利用大根堆，取top 10，复杂度O(nlogn)。 3. 新问题： 如何划分数据？如何归并结果？ 4. 方案： (1)哈希表常驻内存，大小(255 +4) * 3 * 1000000，约800MB。 (2)分13（200MB * 13 = 2.6GB）次调入日志数据，每次取200MB数据进行hash。 一致性哈希 字节面试题 64匹马 8赛道 求前4 给定m个不重复的字符 [a, b, c, d]，以及一个长度为n的字符串tbcacbdata，问能否在这个字符串中找到一个长度为m的连续子串，使得这个子串刚好由上面m个字符组成，顺序无所谓，返回任意满足条件的一个子串的起始位置，未找到返回-1。比如上面这个例子，acbd，3。 给多个ip段（可能重叠），给定一个ip,如何快速查询ip在哪几个ip段 （网易） （大概思路：将string类型的ip转换为unsigned long类型，哈希用startip/endip做key，排序map，二分查找指定ip，比较是否满足startip&lt;= current &lt;= endip） 浏览器输入url发生了什么]]></content>
      <categories>
        <category>面经</category>
      </categories>
      <tags>
        <tag>面经</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F08%2F01%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
